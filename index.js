import bindings from 'bindings';
const cpp_back = bindings('newquote-cpp-backend');
import fs from 'fs';
import fetch from 'node-fetch';
import { VK } from 'vk-io';

const vk = new VK({
    token: fs.readFileSync("token.txt", "utf8").trim(),
    apiLimit: 20,
    language: 'ru'
});

vk.updates.on('message_new', async (ctx, next) => {
    if (ctx.text === '!help' || ctx.text === '!—Ö–µ–ª–ø') {
        await ctx.send('–ü—Ä–∏–≤–µ—Ç! –ü–µ—Ä–µ—à–ª–∏ –º–Ω–µ –ª—é–±–æ–µ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑ –Ω–µ–≥–æ —Ü–∏—Ç–∞—Ç—É. –ù–∞ –∫–∏—Ç–∞–π—Å–∫–æ–º –∏ —Å —ç–º–æ–¥–∑–∏ - –±–µ–∑ –ø—Ä–æ–±–ª–µ–º üòâ');
    } else {
        return next();
    }
});

vk.updates.on('message_new', async (ctx, next) => {
    if (ctx.hasForwards) {
        const fwd = ctx.forwards;
        const root_msg = fwd[0];
        let text_lst = [];
        fwd.forEach((msg) => {
            if (msg.hasText) text_lst.push(msg.text.replace(/\p{Extended_Pictographic}/u, '$&\uFE0F'))
        });
        const text = text_lst.join("\n");
        if (!text) {
            await ctx.send('–ö–∞–∂–µ—Ç—Å—è, –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—É—Å—Ç—ã–µ. –ú–Ω–µ –Ω—É–∂–µ–Ω —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏–ª–∞—Å—å —Ü–∏—Ç–∞—Ç–∞ üßê');
            return;
        }
        let name, ava_link;
        if (root_msg.senderType === 'group') {
            const group = (await vk.api.groups.getById({
                group_ids: -root_msg.senderId
            }))[0];
            name = group.name;
            ava_link = group.photo_200;
        } else if (root_msg.senderType === 'user') {
            const user = (await vk.api.users.get({
                user_ids: root_msg.senderId,
                fields: 'photo_200'
            }))[0];
            name = user.first_name + ' ' + user.last_name;
            ava_link = user.photo_200;
        } else {
            console.log(root_msg);
            name = "–ê–Ω–æ–Ω–∏–º—É—Å";
            ava_link = "https://vk.com/images/camera_200.png";
            await ctx.send("–Ø –Ω–µ –ø–æ–Ω—è–ª –æ—Ç –∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–¥–µ–ª–∞—é –∞–Ω–æ–Ω–∏–º–Ω—ã–º. –ü–µ—Ä–µ–¥–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –Ω–∞ –∏–∑—É—á–µ–Ω–∏–µ üñ®");
        }
        const ava_buf = await (await fetch(ava_link)).arrayBuffer();
        await ctx.sendPhotos([{
            value: Buffer.from(cpp_back.gen_quote(text, name, ava_buf))
        }]);
    } else {
        return next();
    }
});

vk.updates.on('message_new', (ctx) => {
    ctx.send('–Ø –Ω–µ –ø–æ–Ω—è–ª —Ç–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã, –ø—Ä–æ—Å—Ç–∏ üòî\n–û—Ç–ø—Ä–∞–≤—å "!—Ö–µ–ª–ø", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥');
})

vk.updates.start();